"use strict";

var current_environment = 'CELSA_CP_QAP'; 

var environments = {
    //
    // Qlik Sense Server (nominal users)
    //

    // Test
    'CELSA_TEST_CP_QSS':{
        appName:'a1652557-1f0f-42dc-a6bd-f07e1bfc229f',
        states: 'customer-portal'
    },
    'CELSA_TEST_CRM_QSS':{
        appName:'75e168ea-d78d-46eb-9a26-abb964a090dd',
        states: 'sap-crm'
    },
     'CELSA_TEST_FIORI_QSS':{
        appName:'75e168ea-d78d-46eb-9a26-abb964a090dd',
        states: 'sap-fiori'
    },

    //
    // PROD
    //
    'CELSA_CP_QAP':{
		appName: '568f80c8-169a-4bd5-8d09-61a86bdd8e01',
        states: 'customer-portal'
    },
	'CELSA_SAP_CRM' : {
        appName: 'a24a9e3c-6ec0-470c-baaa-599ef344ff49',
        states: 'sap-crm'
    }, 
    'CELSA_SAP_CRM_FIORI' : {
        appName: 'a24a9e3c-6ec0-470c-baaa-599ef344ff49',
        states: 'sap-fiori'
    }
};
























//
// Load the connection depending on the environment
//
var senseConnection, baseURL;
var basePath = window.location.pathname.substring(0, window.location.pathname.lastIndexOf('/'));
senseConnection = environments[current_environment];
senseConnection.getServerUrlWithPrefix = function () {
    return senseConnection.protocol + '://' + senseConnection.host + senseConnection.prefix;
};
senseConnection.getServerUrl = function (with_slash) {
    var _protocol = (senseConnection.isSecure ? "https://" : "http://");
    var _port = (senseConnection.port ? ":" + senseConnection.port : "");
    var _path = senseConnection.prefix;
    if (!with_slash && _path.substring(_path.length - 1) == '/') {
        _path = _path.substring(0, _path.length - 1);
    }
    return  _protocol + senseConnection.host + _port + _path;
};
senseConnection.requestStylesheet = function (server_asset) {
    var link,href,rel, remote_url;
    link = document.createElement( 'link' );
    href = document.createAttribute('href');
    rel = document.createAttribute('rel');
    href.value =  senseConnection.getServerUrlWithPrefix() +  server_asset;
    rel.value = 'stylesheet';
    link.setAttributeNode(href);
    link.setAttributeNode(rel);
    document.head.appendChild(link);

    return link;
};
senseConnection.requestScript = function (server_asset, data_main) {
  var script = document.createElement( 'script' );
  script.type = 'text/javascript';
  script.src = senseConnection.getServerUrlWithPrefix() + server_asset;
  if (data_main) {
    var main = document.createAttribute('data-main');
    main.value = data_main;
    script.setAttributeNode(main);
  }
  document.body.appendChild(script);

  return script;
};
senseConnection.requestAbsScript = function (server_asset) {
  var script = document.createElement( 'script' );
  script.type = 'text/javascript';
  script.src = server_asset;
  document.body.appendChild(script);

  return script;
};
senseConnection.requestAbsStylesheet = function (server_asset) {
    var link,href,rel, remote_url;
    link = document.createElement( 'link' );
    href = document.createAttribute('href');
    rel = document.createAttribute('rel');
    href.value = server_asset;
    rel.value = 'stylesheet';
    link.setAttributeNode(href);
    link.setAttributeNode(rel);
    document.head.appendChild(link);

    return link;
};
senseConnection.setEnvironment = function (embed_config) {
    var environment_name = embed_config.environment;
	senseConnection.host = embed_config.host;
    senseConnection.prefix = embed_config.prefix;
    senseConnection.protocol = embed_config.protocol;
    senseConnection.isSecure = (embed_config.protocol === 'http' ? false : true);
    if (embed_config.port) {
        senseConnection.port = embed_config.port;
    } else {
        senseConnection.port = (embed_config.protocol === 'http' ? 80 : 443);
    }

    // We do have information about the app and the states configuration
    if (!environments[environment_name]) {
        console.error('Environment ' + environment_name + ' not found, possible environments.', environments);
    }
	senseConnection.appName = environments[environment_name].appName;
    senseConnection.states = environments[environment_name].states;

    if (embed_config.start_state) {
        senseConnection.startState = senseConnection.states+ '_' + embed_config.start_state;
    } else {
        senseConnection.startState = null;
    }
};
senseConnection.kickStart = function (remote_server) {
    if (senseConnection.getServerUrl() !== remote_server) {
        senseConnection.remoteServer = remote_server;
    } else {
        senseConnection.remoteServer = senseConnection.getServerUrl();
    }
	senseConnection.requestStylesheet('resources/autogenerated/qlikui.css');

	// USING OUR OWN to avoid overrides -> senseConnection.requestStylesheet('resources/assets/client/client.css');
    
	var require_script = senseConnection.requestScript('resources/assets/external/requirejs/require.js');
	require_script.onload = function () {
        senseConnection.requestAbsStylesheet(senseConnection.remoteServer + '/styles/main.css');
		senseConnection.requestAbsScript(senseConnection.remoteServer + '/scripts/celsa.js');
	};
};
senseConnection.setUserLanguage = function (lang_code) {
    senseConnection.userLanguage = lang_code;
};
if (!senseConnection && window.console) {
    if (window.console) console.error('Environment in config does not exist or is incorrect.');
}
// Create the base url for requirejs
var _protocol = (senseConnection.isSecure ? "https://" : "http://");
var _port = (senseConnection.port ? ":" + senseConnection.port : "");
var _path = senseConnection.prefix + "resources";
baseURL =  _protocol + senseConnection.host + _port + _path;


